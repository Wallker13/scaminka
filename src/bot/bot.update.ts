import { Command, Ctx, Hears, On, Update } from 'nestjs-telegraf';
import { deunionize } from 'telegraf';
import { IContext } from '../models/IContext';
import { BotService } from './bot.service';
import { CallbackQueryService } from './bot.callback-query';
import { PaymentService } from './bot.payment';
import { UserDatabase } from '../database/database.user';
import keyboard from './keyboard/bot.keyboard';
import buttons from './keyboard/bot.buttons';
import { encryptData } from '../helpers/encryption';
import { CardDatabase } from '../database/database.card';
import { ProductDatabase } from '../database/database.product';

@Update()
export class BotUpdate {
   constructor(
      private readonly botService: BotService,
      private readonly callbackQueryService: CallbackQueryService,
      private readonly paymentService: PaymentService,
      private readonly userDatabase: UserDatabase,
      private readonly cardDatabase: CardDatabase,
      private readonly productDatabase: ProductDatabase
   ) { }

   @Command('start')
   async onStart(@Ctx() ctx: IContext) {
      const isUser = await this.userDatabase.authUser(ctx.chat.id);
      try {
         if (isUser) {
            await ctx.replyWithHTML('–ú–µ–Ω—é:', keyboard.menu);
         } else {
            await ctx.replyWithHTML(`–í–∞—Å –≤—ñ—Ç–∞—î –∫–æ–º–∞–Ω–¥–∞ <b>BASICS!</b>\n\n–î–∞–Ω–∏–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—ñ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –Ω–∞–π–Ω–∏–∂—á–∏–º–∏ —Ü—ñ–Ω–∞–º–∏, –ø–æ–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏, –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É –∑ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞–º–∏ —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ.\n\n–û–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ —É—Å—ñ–º–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏ –Ω–∏–∂—á–µüëá`, keyboard.menu);
         }
      } catch (err) {
         console.log(err);
      }
   }

   @Command('restart')
   @Hears(buttons.tariffs.back)
   @Hears(buttons.courses.back)
   async onRestart(@Ctx() ctx: IContext) {
      try {
         await ctx.replyWithHTML('–ú–µ–Ω—é:', keyboard.menu);
      } catch (err) {
         console.log(err);
      }
   }

   @Hears(buttons.menu.discountedProducts)
   async onDiscountedProducts(@Ctx() ctx: IContext) {
      try {
         const link = 'https://t.me/+yYXMLjH3f2VkYjEy';
         await ctx.replyWithHTML(`–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, –¥–µ –∑—ñ–±—Ä–∞–Ω—ñ –Ω–∞–π–∫—Ä–∞—â—ñ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –Ω–∞–π–Ω–∏–∂—á–∏–º–∏ —Ü—ñ–Ω–∞–º–∏.\n\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è - <i>${link}</i>`, keyboard.discountedProducts);
      } catch (err) {
         console.log(err);
      }
   }

   @Hears(buttons.menu.placeProduct)
   async onPlaceProduct(@Ctx() ctx: IContext) {
      const data = { id: ctx.chat.id, username: ctx.from.username || '' };
      const params = encryptData(JSON.stringify(data));
      const url = `${process.env.WEB_APP_URL}/create-product/${params}`;
      try {
         await ctx.replyWithHTML('–©–æ–± —Ä–æ–∑–º—ñ—Å–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—Éüëá', {
            reply_markup: {
               inline_keyboard: [
                  [{ text: buttons.placeProduct.fillForm, url }]
               ]
            }
         });
      } catch (err) {
         console.log(err);
      }
   }

   @Hears(buttons.menu.providerBase)
   @Hears(buttons.confirmation.cancel)
   async onProviderBase(@Ctx() ctx: IContext) {
      try {
         await ctx.replyWithHTML('–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:', keyboard.tariffs);
      } catch (err) {
         console.log(err);
      }
   }

   @Hears(buttons.tariffs.oneMonth)
   @Hears(buttons.tariffs.twoMonths)
   @Hears(buttons.tariffs.sixMonths)
   async onTariffs(@Ctx() ctx: IContext) {
      const { text } = deunionize(ctx.message);
      if (!text) return;

      const [tariff, price] = text.split(' - ');
      const tariffData = this.botService.getTariffData(text);
      ctx.session.type = 'subscription';
      ctx.session.subscription = { tariff, ...tariffData };
      try {
         const phone = await this.userDatabase.getPhone(ctx.chat.id);
         const selectedKeyboard = !!phone ? keyboard.confirmationWithoutPhone : keyboard.confirmationWithPhone;
         const card = await this.cardDatabase.getActiveCard();
         await ctx.replyWithHTML(`<b>–í–∏–±—Ä–∞–Ω–∏–π —Ç–∞—Ä–∏—Ñ:</b> <i>${tariff}</i>\n<b>–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏:</b> <i>${price}</i>\n\n–î–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–≤–µ–¥—ñ—Ç—å –≤–∫–∞–∑–∞–Ω—É —Å—É–º—É –∑–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –Ω–∏–∂—á–µüëá<code>\n\n${card ? card : '4444333322221111'}</code>\n\n<b>–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É!</b> –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å—É–º—É, —è–∫–∞ –≤–∫–∞–∑–∞–Ω–∞ –≤–∏—â–µ. –£ —Ü—é —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó –Ω–µ –≤—Ö–æ–¥—è—Ç—å, –≤–æ–Ω–∏ —Å—Ç—è–≥—É—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ –±–∞–Ω–∫–æ–º. –Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ —ñ –∑ –≤–∞—à–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É —Å–ø–∏—Å–∞–ª–∏—Å—å –∫–æ—à—Ç–∏, –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <i>¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É ‚úÖ¬ª</i>, –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.`, selectedKeyboard);
      } catch (err) {
         console.log(err);
      }
   }

   @Hears(buttons.tariffs.becomeProvider)
   async onBecomeProvider(@Ctx() ctx: IContext) {
      try {
         const data = { id: ctx.chat.id, username: ctx.from.username || '' };
         const params = encryptData(JSON.stringify(data));
         const url = `${process.env.WEB_APP_URL}/create-provider-product/${params}`;

         await ctx.replyWithHTML('–©–æ–± —Å—Ç–∞—Ç–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–æ–º, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—Éüëá', {
            reply_markup: {
               inline_keyboard: [
                  [{ text: buttons.placeProduct.fillForm, url }]
               ]
            }
         });
      } catch (err) {
         console.log(err);
      }
   }

   @Hears(buttons.menu.buyCourses)
   @Hears(buttons.confirmation.cancel)
   async onBuyCourses(@Ctx() ctx: IContext) {
      try {
         await ctx.replyWithHTML('–ö—É—Ä—Å–∏üìö, —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –≤–∞–º –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–º–æ–≤–ª—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –ö–∏—Ç–∞—é –æ–ø—Ç–æ–≤–∏–º–∏ –ø–∞—Ä—Ç—ñ—è–º–∏ —ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–π–º–∞—Ç–∏—Å—è –¥—Ä–æ–ø—à–∏–ø—ñ–Ω–≥–æ–º.\n\n–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å:', keyboard.courses);
      } catch (err) {
         console.log(err);
      }
   }

   @Hears(buttons.courses.course1)
   @Hears(buttons.courses.course2)
   async onCourses(@Ctx() ctx: IContext) {
      const { text } = deunionize(ctx.message);
      if (!text) return;

      const [course, price] = text.split(' - ');
      const courseData = this.botService.getCourseData(text);

      ctx.session.type = 'payment';
      ctx.session.payment = { course, ...courseData };

      try {
         const phone = await this.userDatabase.getPhone(ctx.chat.id);
         const selectedKeyboard = !!phone ? keyboard.confirmationWithoutPhone : keyboard.confirmationWithPhone;
         const card = await this.cardDatabase.getActiveCard() || '4441114458666086';
         await ctx.replyWithHTML(`<b>–í–∏–±—Ä–∞–Ω–∏–π –∫—É—Ä—Å:</b> <i>${course}</i>\n<b>–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏:</b> <i>${price}</i>\n\n–î–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–≤–µ–¥—ñ—Ç—å –≤–∫–∞–∑–∞–Ω—É —Å—É–º—É –∑–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –Ω–∏–∂—á–µüëá<code>\n\n${card ? card : '4444333322221111'}</code>\n\n<b>–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É!</b> –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å—É–º—É, —è–∫–∞ –≤–∫–∞–∑–∞–Ω–∞ –≤–∏—â–µ. –£ —Ü—é —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó –Ω–µ –≤—Ö–æ–¥—è—Ç—å, –≤–æ–Ω–∏ —Å—Ç—è–≥—É—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ –±–∞–Ω–∫–æ–º. –Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ —ñ –∑ –≤–∞—à–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É —Å–ø–∏—Å–∞–ª–∏—Å—å –∫–æ—à—Ç–∏, –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <i>¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É ‚úÖ¬ª</i>, –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.`, selectedKeyboard);
      } catch (err) {
         console.log(err);
      }
   }

   @On('contact')
   async onContact(@Ctx() ctx: IContext) {
      const type = ctx.session.type;

      try {
         if (!type) {
            await ctx.replyWithHTML('–ß–∞—Å –æ–ø–ª–∞—Ç–∏ –≤–∏–π—à–æ–≤! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', keyboard.tariffs);
         } else {
            const { contact: { phone_number } } = deunionize(ctx.message);
            await this.userDatabase.addPhone(ctx.chat.id, phone_number);

            if (type === 'subscription') await this.paymentService.confirmSubscription(ctx, phone_number);
            if (type === 'payment') await this.paymentService.confirmPayment(ctx, phone_number);
         }
      } catch (err) {
         console.log(err);
      }
   }

   @Hears(buttons.confirmation.confirmPayment)
   async onConfirmPayment(@Ctx() ctx: IContext) {
      const type = ctx.session.type;

      if (!type) {
         try {
            await ctx.replyWithHTML('–ß–∞—Å –æ–ø–ª–∞—Ç–∏ –≤–∏–π—à–æ–≤! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', keyboard.tariffs);
         } catch (err) {
            console.log(err)
         }
      } else {
         const phone = await this.userDatabase.getPhone(ctx.chat.id);

         if (type === 'subscription') await this.paymentService.confirmSubscription(ctx, phone);
         if (type === 'payment') await this.paymentService.confirmPayment(ctx, phone);
      }
   }

   @Hears(buttons.menu.myProfile)
   async onMyProfile(@Ctx() ctx: IContext) {
      const subscription = await this.userDatabase.getSubscription(ctx.chat.id);
      try {
         if (subscription) {
            await ctx.replyWithHTML(`<b>–ü—ñ–¥–ø–∏—Å–∫–∞:</b> <i>–î—ñ–π—Å–Ω–∞ –¥–æ ${subscription}</i>`);
         } else {
            await ctx.replyWithHTML(`<b>–ü—ñ–¥–ø–∏—Å–∫–∞:</b> <i>–ù–µ–º–∞—î</i>`);
         }
      } catch (err) {
         console.log(err)
      }
   }

   @Hears(buttons.menu.feedback)
   async onFeedback(@Ctx() ctx: IContext) {
      try {
         await ctx.replyWithHTML(`–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—Å. –ú–∏ –∑ —Ä–∞–¥—ñ—Å—Ç—é –≤–∞–º –¥–æ–ø–æ–º–æ–∂–µ–º–æ.\n\n<b>–ê–¥–º—ñ–Ω:</b> <i>@basics_admin</i>`);
      } catch (err) {
         console.log(err)
      }
   }

   @On('callback_query')
   async onCallbackQuery(@Ctx() ctx: IContext) {
      const { data, message } = deunionize(ctx.callbackQuery);
      if (!data || !message) return;
      await this.callbackQueryService.onCallbackQuery(ctx);
   }

   @On('channel_post')
   async func(@Ctx() ctx: IContext) {
      if (ctx.chat.id === Number(process.env.PRODUCT_GROUP_ID)) {
         const { caption_entities } = deunionize(ctx.channelPost);
         const messageEntity = caption_entities?.filter(entity => entity.type === 'text_link');
         if (messageEntity?.length) {
            const { url } = deunionize(messageEntity[0]);
            const productId = url.split('=')[1];
            await this.productDatabase.addMessageId(productId, ctx.channelPost.message_id);
         }
      }
   }
}